{"version":3,"sources":["components/PanoView/PanoView.js","App.js","serviceWorker.js","index.js"],"names":["PanoView","src","roomName","sphereElementRef","React","createRef","useEffect","viewer","Viewer","container","current","panorama","loadingTxt","caption","navbar","id","title","className","content","onClick","alert","plugins","MarkersPlugin","markers","markersPlugin","getPlugin","on","e","marker","text","JSON","stringify","console","log","data","rightclick","newPolyMarker","polyArray","push","longitude","latitude","updateMarker","polylineRad","addMarker","svgStyle","fill","stroke","strokeWidth","tooltip","position","destroy","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mPAgHeA,G,MAzGE,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,SACjBC,EAAmBC,IAAMC,YAiG/B,OA/FAC,qBAAU,WACR,IAAMC,EAAS,IAAIC,SAAO,CACxBC,UAAWN,EAAiBO,QAC5BC,SAAUV,EACVW,WAAY,QACZC,QAASX,EACTY,OAAQ,CACN,OACA,CACEC,GAAI,YACJC,MAAO,cACPC,UAAW,gBACXC,QAAS,OACTC,QAAS,kBAAMC,MAAM,sBAEvB,UACA,cAEFC,QAAS,CACP,CACEC,IACA,CAEEC,QAAS,QAMbC,EAAgBjB,EAAOkB,UAAUH,KA6DrC,OA3DAE,EAAcE,GAAG,iBAAiB,SAACC,EAAGC,GACpC,IAAIC,EAAO,GAEXA,GAAQ,IACRA,GAAQ,gBACRA,GAAQ,gBACRA,GAAQC,KAAKC,UAAUH,EAAM,OAAN,aACvBC,GAAQ,IACRA,GAAQ,cACRA,GAAQ,gCACRA,GAAQ,mCACRA,GAAQ,sBACRA,GAAQ,KACRA,GAAQ,aACRA,GAAQ,8CACRA,GAAQ,8BACRA,GAAQ,KACRA,GAAQ,KACRG,QAAQC,IAAIJ,MAGdtB,EAAOmB,GAAG,SAAS,SAACC,EAAGO,GACrB,IAAKA,EAAKC,WAAY,CACpB,IACIC,EAAgBZ,EAAa,QADT,YAExB,GAAIY,EAAe,CACjBJ,QAAQC,IAAI,WACZ,IAAII,EAAYD,EAAa,OAAb,YAChBC,EAAUC,KAAK,CAACJ,EAAKK,UAAWL,EAAKM,WAErChB,EAAciB,aAAa,CACzB1B,GARoB,WASpB2B,YAAaL,SAGfL,QAAQC,IAAI,iBACZT,EAAcmB,UAAU,CACtB5B,GAdoB,WAgBpB2B,YAAa,CACX,CAACR,EAAKK,UAAWL,EAAKM,UACtB,CAACN,EAAKK,UAAY,KAAQL,EAAKM,SAAW,OAE5CI,SAAU,CACRC,KAAM,uBACNC,OAAQ,wBACRC,YAAa,OAEfC,QAAS,CACP9B,QACE,2DACF+B,SAAU,sBAQb,WACL1C,EAAO2C,aAER,CAAC/C,EAAkBF,EAAKC,IAGzB,6BACE,yBAAKe,UAAU,SAASkC,IAAKhD,OC/FpBiD,MATf,WACE,OACE,kBAAC,EAAD,CACEnD,IAAI,gIACJC,SAAS,eCKKmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,a","file":"static/js/main.d40e5a96.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Viewer } from \"photo-sphere-viewer\";\nimport \"../../../node_modules/photo-sphere-viewer/dist/photo-sphere-viewer.css\";\n\nimport MarkersPlugin from \"../../../node_modules/photo-sphere-viewer/dist/plugins/markers\";\nimport \"../../../node_modules/photo-sphere-viewer/dist/plugins/markers.css\";\n\nconst PanoView = ({ src, roomName }) => {\n  const sphereElementRef = React.createRef();\n\n  useEffect(() => {\n    const viewer = new Viewer({\n      container: sphereElementRef.current,\n      panorama: src,\n      loadingTxt: \"hello\",\n      caption: roomName,\n      navbar: [\n        \"zoom\",\n        {\n          id: \"my-button\",\n          title: \"Hello world\",\n          className: \"custom-button\",\n          content: \"Help\",\n          onClick: () => alert(\"Nav Button press\"),\n        },\n        \"caption\",\n        \"fullscreen\",\n      ],\n      plugins: [\n        [\n          MarkersPlugin,\n          {\n            // list of markers\n            markers: [],\n          },\n        ],\n      ],\n    });\n\n    var markersPlugin = viewer.getPlugin(MarkersPlugin);\n\n    markersPlugin.on(\"select-marker\", (e, marker) => {\n      var text = \"\";\n\n      text += \"{\";\n      text += \"id: 'REMOVE',\";\n      text += \"polylineRad: \";\n      text += JSON.stringify(marker[\"config\"][\"polylineRad\"]);\n      text += \",\";\n      text += \"svgStyle: {\";\n      text += \"fill: 'rgba(200, 0, 0, 0.2)',\";\n      text += \"stroke: 'rgba(200, 0, 50, 0.8)',\";\n      text += \"strokeWidth: '2px',\";\n      text += \"},\";\n      text += \"tooltip: {\";\n      text += \"  content: 'A dynamic polysdsdsgon marker',\";\n      text += \"  position: 'right bottom',\";\n      text += \"},\";\n      text += \"},\";\n      console.log(text);\n    });\n\n    viewer.on(\"click\", (e, data) => {\n      if (!data.rightclick) {\n        var newPolyMarkerName = \"poly-new\";\n        var newPolyMarker = markersPlugin[\"markers\"][newPolyMarkerName];\n        if (newPolyMarker) {\n          console.log(\"Update \");\n          var polyArray = newPolyMarker[\"config\"][\"polylineRad\"];\n          polyArray.push([data.longitude, data.latitude]);\n\n          markersPlugin.updateMarker({\n            id: newPolyMarkerName,\n            polylineRad: polyArray,\n          });\n        } else {\n          console.log(\"adding marker\");\n          markersPlugin.addMarker({\n            id: newPolyMarkerName,\n            //need to add two positions because it errors out\n            polylineRad: [\n              [data.longitude, data.latitude],\n              [data.longitude + 0.0001, data.latitude + 0.0001],\n            ],\n            svgStyle: {\n              fill: \"rgba(200, 0, 0, 0.2)\",\n              stroke: \"rgba(200, 0, 50, 0.8)\",\n              strokeWidth: \"2px\",\n            },\n            tooltip: {\n              content:\n                \"New marker to add. Click the button on nav bar when done\",\n              position: \"right bottom\",\n            },\n          });\n        }\n      }\n    });\n\n    // unmount component instructions\n    return () => {\n      viewer.destroy();\n    };\n  }, [sphereElementRef, src, roomName]); // will only be called when the src prop gets updated\n\n  return (\n    <div>\n      <div className=\"viewer\" ref={sphereElementRef} />\n    </div>\n  );\n};\n\nexport default PanoView;\n","import React from \"react\";\nimport { PanoView } from \"./components/PanoView\";\n\nfunction App() {\n  return (\n    <PanoView\n      src=\"https://upload.wikimedia.org/wikipedia/commons/f/f0/Colonia_Ulpia_Traiana_-_Rekonstruktion_r%C3%B6mischer_Schiffe-0010560.jpg\"\n      roomName=\"Boat Room\"\n    />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}